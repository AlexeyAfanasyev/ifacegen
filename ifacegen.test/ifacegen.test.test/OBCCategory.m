/**
 * @generated
 *
 * AUTOGENERATED. DO NOT EDIT! 
 *
 */

#import "OBCCategory.h"
#define NULLABLE( s ) (s == nil ? [NSNull null] : s)
static const NSUInteger jsonFormatOption = 
#ifdef DEBUG
	NSJSONWritingPrettyPrinted;
#else
	0;
#endif

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused"
#pragma clang diagnostic ignored "-Wundeclared-selector"


@implementation OBCBusinessModelRevisionsItem
- (NSDictionary*)dictionaryWithError:(NSError* __autoreleasing*)error {
	return @{
		@"version" : [NSNumber numberWithInt:self.version],
		@"model" : [self.model dictionaryWithError:error]
		};
}
- (NSData*)dumpWithError:(NSError* __autoreleasing*)error {
	NSDictionary* dict = [self dictionaryWithError:error];
	if (*error) return nil;
	else return [NSJSONSerialization dataWithJSONObject:[self dictionaryWithError:error] options:jsonFormatOption error:error];
}
- (instancetype)initWithVersion:(int32_t)version
	andModel:(OBCBusinessModel*)model{
	if (self = [super init]) {
		_version = version;
		_model = model;
	}
	return self;
}
- (void)readDictionary:(NSDictionary*)dict withError:(NSError* __autoreleasing*)error {
	id tmp;
	self.version = ( tmp = [dict objectForKey:@"version"], [tmp isEqual:[NSNull null]] ? 0 : ((NSNumber*)tmp).intValue );
	self.model = [[OBCBusinessModel alloc] initWithDictionary:dict[@"model"] error:error];
}
- (instancetype)initWithDictionary:(NSDictionary*)dictionary error:(NSError* __autoreleasing*)error {
	if ( dictionary == nil ) return nil;
	if (self = [super init]) {
		[self readDictionary:dictionary withError:error];
		if ( error && *error != nil ) self = nil;
	}
	return self;
}
- (instancetype)initWithJSONData:(NSData*)jsonData error:(NSError* __autoreleasing*)error {
	if ( jsonData == nil ) return nil;
	if (self = [super init]) {
		NSDictionary* dict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:error];
		if ( error && *error != nil ) { self = nil; return nil; }
		[self readDictionary:dict withError:error];
		if ( error && *error != nil ) self = nil;
	}
	return self;
}
@end

@implementation OBCBusinessModel
- (NSDictionary*)dictionaryWithError:(NSError* __autoreleasing*)error {
	return @{
		@"name" : NULLABLE(self.name),
		@"revisions" : ^NSArray*(NSArray* inArr) {
			NSMutableArray* resArr = [NSMutableArray arrayWithCapacity:[inArr count]];
				for ( OBCBusinessModelRevisionsItem* inObj in inArr ) {
					[resArr addObject:[inObj dictionaryWithError:error]];
				}
				return resArr; } ( self.revisions ),
		@"description" : NULLABLE(self.theDescription)
		};
}
- (NSData*)dumpWithError:(NSError* __autoreleasing*)error {
	NSDictionary* dict = [self dictionaryWithError:error];
	if (*error) return nil;
	else return [NSJSONSerialization dataWithJSONObject:[self dictionaryWithError:error] options:jsonFormatOption error:error];
}
- (instancetype)initWithName:(NSString*)name
	andRevisions:(NSArray*)revisions
	andTheDescription:(NSString*)theDescription{
	if (self = [super init]) {
		_name = name;
		_revisions = revisions;
		_theDescription = theDescription;
	}
	return self;
}
- (void)readDictionary:(NSDictionary*)dict withError:(NSError* __autoreleasing*)error {
	id tmp;
	self.name = ( tmp = [dict objectForKey:@"name"], [tmp isEqual:[NSNull null]] ? nil : (NSString*)tmp );
	NSArray* dictRevisions2 = [dict objectForKey:@"revisions"];
	NSMutableArray* revisions3;
	if ( dictRevisions2 != nil && ![dictRevisions2 isEqual:[NSNull null]] && [dictRevisions2 isKindOfClass:NSArray.class]) {
		revisions3 = [NSMutableArray arrayWithCapacity:[dictRevisions2 count]];
		for ( id item in dictRevisions2) {
				[revisions3 addObject:[[OBCBusinessModelRevisionsItem alloc] initWithDictionary:item error:error]];
			}
		}
	self.revisions = revisions3;
	self.theDescription = ( tmp = [dict objectForKey:@"description"], [tmp isEqual:[NSNull null]] ? nil : (NSString*)tmp );
}
- (instancetype)initWithDictionary:(NSDictionary*)dictionary error:(NSError* __autoreleasing*)error {
	if ( dictionary == nil ) return nil;
	if (self = [super init]) {
		[self readDictionary:dictionary withError:error];
		if ( error && *error != nil ) self = nil;
	}
	return self;
}
- (instancetype)initWithJSONData:(NSData*)jsonData error:(NSError* __autoreleasing*)error {
	if ( jsonData == nil ) return nil;
	if (self = [super init]) {
		NSDictionary* dict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:error];
		if ( error && *error != nil ) { self = nil; return nil; }
		[self readDictionary:dict withError:error];
		if ( error && *error != nil ) self = nil;
	}
	return self;
}
@end

#pragma clang diagnostic pop
